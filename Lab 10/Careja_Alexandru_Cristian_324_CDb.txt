Laborator 10 - Drumuri de cost minim (Algoritmii Dijkstra si Bellman-Ford)

1. Sa se calc de mana fiecare pas din algoritmul Dijkstra

2. Sa se implementeze in C algoritmul Dijkstra

3. Sa se calc de mana fiecare pas din algoritmul Bellman-Ford (varianta standard)

4. Sa se implementeze in C algoritmul Bellman-Ford


graf orientat cu costuri:
1-2 3
1-3 4
1-5 1
1-6 10
1-7 3
2-3 2
3-4 2
3-6 2
5-4 3
5-7 1
6-4 2
7-3 1
7-4 10
7-5 2

ce contine coada, la fiecare nod care este valoarea lui
la fiecare pas scoate minimul, apoi cal d si p pentru fiecare succesor pentru care se face relaxarea

tabel final cu d si p


la belman ford: s = 1 (ca si la dijkstra)
sa avem pas de initializare pt d si p

1. Dijkstra de mana

d[u] = inf, p[u] = null pentru orice nod u
d[1] = 0
Q = {1, 2, 3, 4, 5, 6, 7}

1: Q != {} => extrag elementul cu d minim
u = 1, Q = {2, 3, 4, 5, 6 , 7}
v = 2
daca d[2] > d[1] + w(1, 2) <=> inf > 0 + 3, Adevarat: d[2] = 3, p[2] = 1
v = 3
daca d[3] > d[1] + w(1, 3) <=> inf > 0 + 4, Adevarat: d[3] = 4, p[3] = 1
v = 5
daca d[5] > d[1] + w(1, 5) <=> inf > 0 + 1, Adevarat: d[5] = 1, p[5] = 1
v = 6
daca d[6] > d[1] + w(1, 6) <=> inf > 0 + 1, Adevarat: d[6] = 10, p[6] = 1
v = 7
daca d[7] > d[1] + w(1, 7) <=> inf > 0 + 1, Adevarat: d[7] = 3, p[6] = 1

2: Q != {} => extrag elementul cu d minim
u = 5, Q = {2, 3, 4, 6, 7}
v = 4
daca d[4] > d[5] + w(5, 4) <=> inf > 1 + 3, Adevarat: d[4] = 4, p[4] = 5
v = 7
daca d[7] > d[5] + w(5, 7) <=> 3 > 1 + 1, Adevarat: d[7] = 2, p[7] = 5

3: Q != {} => extrag elementul cu d minim
u = 7, Q = {2, 3, 4, 6}
v = 3
daca d[3] > d[7] + w(7, 3) <=> 4 > 2 + 1, Adevarat: d[3] = 3, p[3] = 7
v = 4
daca d[4] > d[7] + w(7, 4) <=> 4 > 2 + 10, Fals

4: Q != {} => extrag elementul cu d minim
u = 2, Q = {3, 4, 6}
v = 3
daca d[3] > d[2] + w(2, 3) <=> 3 > 3 + 2, Fals

5: Q != {} => extrag elementul cu d minim
u = 3, Q = {4, 6}
v = 4
daca d[4] > d[3] + w(3, 4) <=> 4 > 3 + 2, Fals
v = 6
daca d[6] > d[3] + w(3, 6) <=> 10 > 3 + 2, Adevarat: d[6] = 5, p[6] = 3

6: Q != {} => extrag elementul cu d minim
u = 4, Q = {6}
Nu are niciun succesor

7: Q != {} => extrag elementul cu d minim
u = 6, Q = {}
v = 4
daca d[4] > d[6] + w(6, 4) <=> 4 > 5 + 2, Fals

8: Q == {} => End

          -----------------------------
nodul:    | 1 | 2 | 3 | 4 | 5 | 6 | 7 |
          -----------------------------
distanta: | 0 | 3 | 3 | 4 | 1 | 5 | 2 |
          -----------------------------
parinte:  | - | 1 | 7 | 5 | 1 | 3 | 5 |
          -----------------------------

3. Belllman-Ford de mana

d[v] = inf, p[v] = null pentru orice nod v
d[1] = 0

1: i = 1
(u, v) = (1, 2)
daca d[2] > d[1] + w(1, 2), Adevarat: d[2] = 3, p[2] = 1
(u, v) = (1, 3)
daca d[3] > d[1] + w(1, 3) <=> inf > 0 + 4, Adevarat: d[3] = 4, p[3] = 1
(u, v) = (1, 5)
daca d[5] > d[1] + w(1, 5) <=> inf > 0 + 1, Adevarat: d[5] = 1, p[5] = 1
(u, v) = (1, 6)
daca d[6] > d[1] + w(1, 6) <=> inf > 0 + 1, Adevarat: d[6] = 10, p[6] = 1
(u, v) = (1, 7)
daca d[7] > d[1] + w(1, 7) <=> inf > 0 + 1, Adevarat: d[7] = 3, p[6] = 1

2: i = 2
(u, v) = (2, 3)
daca d[3] > d[2] + w(2, 3) <=> 4 > 3 + 2, Fals
(u, v) = (3, 4)
daca d[4] > d[3] + w(3, 4) <=> inf > 4 + 2, Adevarat: d[4] = 6, p[4] = 3
(u, v) = (3, 6)
daca d[6] > d[3] + w(3, 6) <=> 10 > 4 + 2, Adevarat: d[6] = 6, p[6] = 3
(u, v) = (5, 4)
daca d[4] > d[5] + w(5, 4) <=> 6 > 1 + 3, Adevarat: d[4] = 4, p[4] = 5
(u, v) = (5, 7)
daca d[7] > d[5] + w(5, 7) <=> 3 > 1 + 1, Adevarat: d[7] = 2, p[7] = 5
(u, v) = (6, 4)
daca d[4] > d[6] + w(6, 4) <=> 4 > 6 + 2, Fals
(u, v) = (7, 3)
daca d[3] > d[7] + w(7, 3) <=> 4 > 2 + 1, Adevarat: d[3] = 3, p[3] = 7
(u, v) = (7, 4)
daca d[4] > d[7] + w(7, 4) <=> 4 > 2 + 10, Fals
(u, v) = (7, 5)
daca d[5] > d[7] + w(7, 5) <=> 1 > 2 + 2, Fals

3: i = 3
(u, v) = (3, 4)
daca d[4] > d[3] + w(3, 4) <=> 4 > 3 + 2, Fals
(u, v) = (3, 6)
daca d[6] > d[3] + w(3, 6) <=> 6 > 3 + 2, Adevarat: d[6] = 5, p[3]
(u, v) = (6, 4)
daca d[4] > d[6] + w(6, 4) <=> 4 > 5 + 2, Fals
(u, v) = (7, 3)
daca d[3] > d[7] + w(7, 3) <=> 3 > 2 + 1, Fals
(u, v) = (7, 4)
daca d[4] > d[7] + w(7, 4) <=> 4 > 2 + 10, Fals
(u, v) = (7, 5)
daca d[5] > d[7] + w(7, 5) <=> 1 > 2 + 2, Fals

4: i = 4
(u, v) = (6, 4)
daca d[4] > d[6] + w(6, 4) <=> 4 > 6 + 2, Fals

5: i = 5
(u, v) = () pentru ca nu s-a modificat niciun d la pasul anterior

6: i = 6
(u, v) = () pentru ca nu s-a modificat niciun d la pasul anterior

Final

          -----------------------------
nodul:    | 1 | 2 | 3 | 4 | 5 | 6 | 7 |
          -----------------------------
distanta: | 0 | 3 | 3 | 4 | 1 | 5 | 2 |
          -----------------------------
parinte:  | - | 1 | 7 | 5 | 1 | 3 | 5 |
          -----------------------------